#pragma once

#include <memory>
#include <vector>

#include <Core/Debug/Assert.h>

#include "StateBase.h"

class StateMachine
{
public:
	~StateMachine();

	template< typename TStateBase >
	void		PushState(MessageBroadcaster* inStateMachineMsgBroadcaster, GameData* inGameData);
	void		PopState();

	StateBase*	GetTop() const;
	void		Clear();

private:
	//std::vector< std::unique_ptr<StateBase> > mStateStack; // A bug in VS2013 means I can't do this, due to copy constructors being generated by std::vector.
	std::vector< StateBase* > mStateStack;
};

template< typename TStateBase >
void StateMachine::PushState(MessageBroadcaster* inStateMachineMsgBroadcaster, GameData* inGameData)
{
	mStateStack.push_back( new TStateBase(inStateMachineMsgBroadcaster, inGameData) );
}
